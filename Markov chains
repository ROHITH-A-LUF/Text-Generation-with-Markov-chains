<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Markov Chain Next Word Predictor</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #4b6cb7, #182848);
      color: #ffffff;
      padding: 20px;
      margin: 0;
    }

    .container {
      max-width: 600px;
      margin: auto;
      background-color: #1f1f2e;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.5);
    }

    input {
      width: 100%;
      font-size: 16px;
      padding: 10px;
      border-radius: 5px;
      border: none;
      margin-top: 10px;
    }

    button {
      background-color: #4fd7ee;
      border: none;
      color: black;
      padding: 10px 20px;
      margin-top: 10px;
      cursor: pointer;
      font-weight: bold;
      border-radius: 5px;
    }

    button:hover {
      background-color: #37b9cd;
    }

    #outputText {
      margin-top: 15px;
      background-color: #2c2c3d;
      padding: 10px;
      border-radius: 5px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Next Word Predictor (Markov Chain)</h1>

    <label for="prefixWord">Enter a word:</label>
    <input type="text" id="prefixWord" placeholder="Type a word to predict next..." />

    <button onclick="predictNextWord()">Predict Next Word</button>

    <h2>Predicted Word:</h2>
    <p id="outputText"></p>
  </div>

  <script>
    // Sample training data
    const trainingData = `
      The sun sets over the sea. The waves crash against the shore.
      The sky turns orange and purple as birds fly home.
      The fisherman casts his net into the ocean.
      The stars begin to appear in the darkening sky.
      The night is calm and peaceful.
      The moon reflects on the water.
      The boat rocks gently.
    `;

    let markovChain = {};

    // Build the Markov chain
    function buildMarkovChain(text) {
      const words = text.toLowerCase().replace(/[.,!?]/g, "").split(/\s+/);
      const chain = {};

      for (let i = 0; i < words.length - 1; i++) {
        const word = words[i];
        const nextWord = words[i + 1];

        if (!chain[word]) {
          chain[word] = {};
        }

        if (!chain[word][nextWord]) {
          chain[word][nextWord] = 0;
        }

        chain[word][nextWord]++;
      }

      return chain;
    }

    // Get the most probable next word
    function getMostProbableNextWord(word, chain) {
      word = word.toLowerCase();
      if (!chain[word]) return "No prediction available.";

      const nextWords = chain[word];
      let maxCount = 0;
      let mostLikelyWord = "";

      for (let next in nextWords) {
        if (nextWords[next] > maxCount) {
          maxCount = nextWords[next];
          mostLikelyWord = next;
        }
      }

      return mostLikelyWord || "No prediction available.";
    }

    // Predict the next word
    function predictNextWord() {
      const prefixWord = document.getElementById("prefixWord").value.trim();
      if (!prefixWord) {
        alert("Please enter a word.");
        return;
      }

      const prediction = getMostProbableNextWord(prefixWord, markovChain);
      document.getElementById("outputText").innerText = prediction;
    }

    // Build the chain when page loads
    window.onload = () => {
      markovChain = buildMarkovChain(trainingData);
    };
  </script>
</body>
</html>
